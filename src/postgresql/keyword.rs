// http://www.postgres.cn/docs/12/sql-keywords-appendix.html
// postgresql SQL关键词
#[derive(Debug, PartialEq)]
pub enum Keyword {
    Abs,
    All,
    Analyse,
    Analyze,
    And,
    Any,
    Array,
    As,
    Asc,
    Asymmetric,
    Authorization,
    Binary,
    Both,
    Case,
    Cast,
    Check,
    Collate,
    Collation,
    Column,
    Concurrently,
    Constraint,
    Create,
    Cross,
    Current_Catalog,
    Current_Date,
    Current_Role,
    Current_Schema,
    Current_Time,
    Current_Timestamp,
    Current_User,
    Default,
    Deferrable,
    Desc,
    Distinct,
    Do,
    Else,
    Except,
    False,
    Fetch,
    For,
    Foreign,
    Freeze,
    From,
    Full,
    Grant,
    Group,
    Having,
    Ilike,
    In,
    Initially,
    Inner,
    Intersect,
    Into,
    Is,
    Isnull,
    Join,
    Lateral,
    Leading,
    Left,
    Like,
    Limit,
    Localtime,
    Localtimestamp,
    Natural,
    Not,
    Notnull,
    Null,
    On,
    Only,
    Or,
    Order,
    Overlaps,
    Placing,
    Primary,
    References,
    Returning,
    Right,
    Select,
    Session_User,
    Similar,
    Some,
    Symmetric,
    Table,
    Tablesample,
    Then,
    To,
    Trailing,
    True,
    Union,
    Unique,
    User,
    Using,
    Variadic,
    Verbose,
    When,
    Where,
    Window,
    With,
}

impl Keyword {
    pub fn compare_str(input: &str) -> Option<Self> {
        let input_uppercase = input.to_uppercase();
        match input_uppercase.as_str() {
            "ABS" => Some(Keyword::Abs),
            "ALL" => Some(Keyword::All),
            "ANALYSE" => Some(Keyword::Analyse),
            "ANALYZE" => Some(Keyword::Analyze),
            "AND" => Some(Keyword::And),
            "ANY" => Some(Keyword::Any),
            "ARRAY" => Some(Keyword::Array),
            "AS" => Some(Keyword::As),
            "ASC" => Some(Keyword::Asc),
            "ASYMMETRIC" => Some(Keyword::Asymmetric),
            "AUTHORIZATION" => Some(Keyword::Authorization),
            "BINARY" => Some(Keyword::Binary),
            "BOTH" => Some(Keyword::Both),
            "CASE" => Some(Keyword::Case),
            "CAST" => Some(Keyword::Cast),
            "CHECK" => Some(Keyword::Check),
            "COLLATE" => Some(Keyword::Collate),
            "COLLATION" => Some(Keyword::Collation),
            "COLUMN" => Some(Keyword::Column),
            "CONCURRENTLY" => Some(Keyword::Concurrently),
            "CONSTRAINT" => Some(Keyword::Constraint),
            "CREATE" => Some(Keyword::Create),
            "CROSS" => Some(Keyword::Cross),
            "CURRENT_CATALOG" => Some(Keyword::Current_Catalog),
            "CURRENT_DATE" => Some(Keyword::Current_Date),
            "CURRENT_ROLE" => Some(Keyword::Current_Role),
            "CURRENT_SCHEMA" => Some(Keyword::Current_Schema),
            "CURRENT_TIME" => Some(Keyword::Current_Time),
            "CURRENT_TIMESTAMP" => Some(Keyword::Current_Timestamp),
            "CURRENT_USER" => Some(Keyword::Current_User),
            "DEFAULT" => Some(Keyword::Default),
            "DEFERRABLE" => Some(Keyword::Deferrable),
            "DESC" => Some(Keyword::Desc),
            "DISTINCT" => Some(Keyword::Distinct),
            "DO" => Some(Keyword::Do),
            "ELSE" => Some(Keyword::Else),
            "EXCEPT" => Some(Keyword::Except),
            "FALSE" => Some(Keyword::False),
            "FETCH" => Some(Keyword::Fetch),
            "FOR" => Some(Keyword::For),
            "FOREIGN" => Some(Keyword::Foreign),
            "FREEZE" => Some(Keyword::Freeze),
            "FROM" => Some(Keyword::From),
            "FULL" => Some(Keyword::Full),
            "GRANT" => Some(Keyword::Grant),
            "GROUP" => Some(Keyword::Group),
            "HAVING" => Some(Keyword::Having),
            "ILIKE" => Some(Keyword::Ilike),
            "IN" => Some(Keyword::In),
            "INITIALLY" => Some(Keyword::Initially),
            "INNER" => Some(Keyword::Inner),
            "INTERSECT" => Some(Keyword::Intersect),
            "INTO" => Some(Keyword::Into),
            "IS" => Some(Keyword::Is),
            "ISNULL" => Some(Keyword::Isnull),
            "JOIN" => Some(Keyword::Join),
            "LATERAL" => Some(Keyword::Lateral),
            "LEADING" => Some(Keyword::Leading),
            "LEFT" => Some(Keyword::Left),
            "LIKE" => Some(Keyword::Like),
            "LIMIT" => Some(Keyword::Limit),
            "LOCALTIME" => Some(Keyword::Localtime),
            "LOCALTIMESTAMP" => Some(Keyword::Localtimestamp),
            "NATURAL" => Some(Keyword::Natural),
            "NOT" => Some(Keyword::Not),
            "NOTNULL" => Some(Keyword::Notnull),
            "NULL" => Some(Keyword::Null),
            "ON" => Some(Keyword::On),
            "ONLY" => Some(Keyword::Only),
            "OR" => Some(Keyword::Or),
            "ORDER" => Some(Keyword::Order),
            "OVERLAPS" => Some(Keyword::Overlaps),
            "PLACING" => Some(Keyword::Placing),
            "PRIMARY" => Some(Keyword::Primary),
            "REFERENCES" => Some(Keyword::References),
            "RETURNING" => Some(Keyword::Returning),
            "RIGHT" => Some(Keyword::Right),
            "SELECT" => Some(Keyword::Select),
            "SESSION_USER" => Some(Keyword::Session_User),
            "SIMILAR" => Some(Keyword::Similar),
            "SOME" => Some(Keyword::Some),
            "SYMMETRIC" => Some(Keyword::Symmetric),
            "TABLE" => Some(Keyword::Table),
            "TABLESAMPLE" => Some(Keyword::Tablesample),
            "THEN" => Some(Keyword::Then),
            "TO" => Some(Keyword::To),
            "TRAILING" => Some(Keyword::Trailing),
            "TRUE" => Some(Keyword::True),
            "UNION" => Some(Keyword::Union),
            "UNIQUE" => Some(Keyword::Unique),
            "USER" => Some(Keyword::User),
            "USING" => Some(Keyword::Using),
            "VARIADIC" => Some(Keyword::Variadic),
            "VERBOSE" => Some(Keyword::Verbose),
            "WHEN" => Some(Keyword::When),
            "WHERE" => Some(Keyword::Where),
            "WINDOW" => Some(Keyword::Window),
            "WITH" => Some(Keyword::With),
            _ => None,
        }
    }
}
